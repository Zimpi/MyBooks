@page "/"
@using Google.Apis.Books.v1.Data
@using MyBooks.Components
@inject BooksService BookService
@inject IDialogService DialogService

    <MudText Style="margin-bottom: 14px" Typo="Typo.h5">Empfohlene Bücher</MudText>

<title>MyBooks - Entdecken</title>

@if (Recommended != null && Recommended.Items.Count > 0)
{
    <MudGrid Spacing="5">
        @foreach (var reco in Recommended.Items)
        {
            <MudItem xs="12">
                <BookComponent Book="reco"/>
            </MudItem>
        }
    </MudGrid>

}
else
{
<MudGrid >
    <MudItem xs="12">
        <MudSkeleton Animation="Animation.Pulse" SkeletonType="SkeletonType.Rectangle" Width="128px" Height="195px" />
    </MudItem>
    <MudItem xs="12">
        <MudSkeleton Animation="Animation.Pulse" SkeletonType="SkeletonType.Rectangle" Width="128px" Height="195px" />
    </MudItem>
        <MudItem xs="12">
            <MudSkeleton Animation="Animation.Pulse" SkeletonType="SkeletonType.Rectangle" Width="128px" Height="195px" />
        </MudItem>
   
</MudGrid>
}

@code {

    public Volumes? Recommended { get; set; } = null;


    protected override async Task OnInitializedAsync()
    {
        await LoadRecommended();
    }

    public async Task LoadRecommended()
    {
        Recommended = await BookService.Volumes.Recommended.List().ExecuteAsync();

    }

    private async Task ShowBookDetail(Volume book)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Large, };
        var dialogParameters = new DialogParameters { {"Book", book} };
        await DialogService.ShowAsync<BookDetailDialog>(book.VolumeInfo.Title, dialogParameters, options);
    }

}